"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundleBasedOnNftFiles = exports.splitApiRoutes = void 0;
const destr_1 = __importDefault(require("destr"));
const fs_extra_1 = require("fs-extra");
const pathe_1 = require("pathe");
/**
 * If this flag is enabled, we generate individual Lambda functions for API Routes.
 * They're packed together in 50mb chunks to avoid hitting the Lambda size limit.
 *
 * To prevent bundling times from rising,
 * we use the "none" bundling strategy where we fully rely on Next.js' `.nft.json` files.
 * This should to a significant speedup, but is still experimental.
 *
 * If disabled, we bundle all API Routes into a single function.
 * This is can lead to large bundle sizes.
 *
 * Relies on `next-server.js.nft.json`, which is only supported in Next.js 12+.
 *
 * Disabled by default. Can be overriden using the NEXT_SPLIT_API_ROUTES env var.
 */
const splitApiRoutes = (featureFlags, publish) => {
    var _a, _b;
    const isEnabled = (_b = (_a = (0, destr_1.default)(process.env.NEXT_SPLIT_API_ROUTES)) !== null && _a !== void 0 ? _a : featureFlags.next_split_api_routes) !== null && _b !== void 0 ? _b : false;
    if (isEnabled && !(0, fs_extra_1.existsSync)((0, pathe_1.join)(publish, 'next-server.js.nft.json'))) {
        console.warn('Trace-based bundling not possible on this version of Next.js. Speed up your builds significantly by upgrading to Next.js v12 or newer.');
        return false;
    }
    return isEnabled;
};
exports.splitApiRoutes = splitApiRoutes;
const bundleBasedOnNftFiles = (featureFlags) => {
    var _a, _b;
    const isEnabled = (_b = (_a = (0, destr_1.default)(process.env.NEXT_BUNDLE_BASED_ON_NFT_FILES)) !== null && _a !== void 0 ? _a : featureFlags.next_bundle_based_on_nft_files) !== null && _b !== void 0 ? _b : false;
    return isEnabled;
};
exports.bundleBasedOnNftFiles = bundleBasedOnNftFiles;
